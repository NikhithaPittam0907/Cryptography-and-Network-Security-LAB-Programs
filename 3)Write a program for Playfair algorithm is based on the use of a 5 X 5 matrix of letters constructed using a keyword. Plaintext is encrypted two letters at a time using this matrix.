#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
char keyMatrix[SIZE][SIZE];
void createKeyMatrix(char key[]) {
    int visited[26] = {0};
    int i, j, row = 0, col = 0;
    for (i = 0; key[i] != '\0'; i++) {
        if (key[i] == 'J') key[i] = 'I';  
        if (!visited[key[i] - 'A']) {
            keyMatrix[row][col++] = key[i];
            visited[key[i] - 'A'] = 1;
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }
    for (i = 0; i < 26; i++) {
        if (i + 'A' == 'J') continue;
        if (!visited[i]) {
            keyMatrix[row][col++] = i + 'A';
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }
}
void findPosition(char letter, int *row, int *col) {
    if (letter == 'J') letter = 'I';
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (keyMatrix[i][j] == letter) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void processDigraph(char text[], int encrypt) {
    for (int i = 0; text[i] != '\0'; i += 2) {
        int row1, col1, row2, col2;
        findPosition(text[i], &row1, &col1);
        findPosition(text[i + 1], &row2, &col2);
        if (row1 == row2) {  // Same row
            col1 = (col1 + encrypt + SIZE) % SIZE;
            col2 = (col2 + encrypt + SIZE) % SIZE;
        } else if (col1 == col2) {  // Same column
            row1 = (row1 + encrypt + SIZE) % SIZE;
            row2 = (row2 + encrypt + SIZE) % SIZE;
        } else {  // Rectangle swap
            int temp = col1;
            col1 = col2;
            col2 = temp;
        }

        text[i] = keyMatrix[row1][col1];
        text[i + 1] = keyMatrix[row2][col2];
    }
}
void prepareText(char text[]) {
    int len = strlen(text), i, j = 0;
    char newText[100];
    for (i = 0; i < len; i++) {
        if (!isalpha(text[i])) continue;  
        newText[j++] = toupper(text[i] == 'J' ? 'I' : text[i]);
        if (j > 1 && newText[j - 1] == newText[j - 2]) {
            newText[j++] = 'X';  
        }
    }
    if (j % 2 != 0) newText[j++] = 'X'; 
    newText[j] = '\0';
    strcpy(text, newText);
}
int main() {
    char key[] = "PLAYFAIR";
    char text[] = "HELLO WORLD";
    createKeyMatrix(key);
    prepareText(text);
    printf("Original Text: %s\n", text);
    processDigraph(text, 1);  // Encrypt
    printf("Encrypted: %s\n", text);
    processDigraph(text, -1);  // Decrypt
    printf("Decrypted: %s\n", text);
    return 0;
}
